apply plugin: 'maven-publish'

ext.licenseFile = files("$rootDir/LICENSE.md")

def pubVersion = System.getenv("releaseVersion") ?: "test"
def repoUrl = System.getenv("mavenRepo") ?: "$rootDir/repos"
def releasesRepoUrl = "$repoUrl/${project.property("vendordepPublish.releasesRepoName")}"
def outputsFolder = file("$buildDir/outputs")
def versionFile = file("$outputsFolder/version.txt")
def vendordepFile = file("$outputsFolder/${project.property("vendordepPublish.vendordepFileName")}")

task outputVersions() {
	description = 'Prints the versions of wpilib to a file for use by the downstream packaging project'
	group = 'Build'
	outputs.files(versionFile)

	doFirst {
		buildDir.mkdir()
		outputsFolder.mkdir()
	}

	doLast {
		versionFile.write pubVersion
	}
}

task libraryBuild() {}

build.dependsOn outputVersions

task copyAllOutputs(type: Copy) {
	destinationDir file("$buildDir/allOutputs")
	from versionFile
	dependsOn outputVersions
}

build.dependsOn copyAllOutputs
copyAllOutputs.dependsOn outputVersions

ext.addTaskToCopyAllOutputs = { task ->
	copyAllOutputs.dependsOn task
	copyAllOutputs.inputs.file task.archiveFile
	copyAllOutputs.from task.archiveFile
}

def artifactGroupId = project.property("vendordepPublish.artifactGroupId")
def baseArtifactId = project.property("vendordepPublish.baseArtifactId")
def javaBaseName = "_GROUP_io_github_roboblazers7617_ID_${baseArtifactId}-java_CLS"

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

task outputJar(type: Jar, dependsOn: classes) {
	archiveBaseName = javaBaseName
	destinationDirectory = outputsFolder
	from sourceSets.main.output
}

task outputSourcesJar(type: Jar, dependsOn: classes) {
	archiveBaseName = javaBaseName
	destinationDirectory = outputsFolder
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task outputJavadocJar(type: Jar, dependsOn: javadoc) {
	archiveBaseName = javaBaseName
	destinationDirectory = outputsFolder
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

// Apply template variables from the vendordep file.
// Replaces ${VARIABLE} with VARIABLE: value in expand()
task vendordepJson() {
    description = 'Builds the vendordep json file.'
    group = 'Build'
    outputs.files(vendordepFile)

    copy {
        from project.property("vendordepPublish.vendordepFileName")
        into outputsFolder
        expand(version: pubVersion,
        groupId: artifactGroupId,
        artifactId: baseArtifactId)
    }
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives outputJar
	archives outputSourcesJar
	archives outputJavadocJar
}

addTaskToCopyAllOutputs(outputSourcesJar)
addTaskToCopyAllOutputs(outputJavadocJar)
addTaskToCopyAllOutputs(outputJar)

build.dependsOn outputSourcesJar
build.dependsOn outputJavadocJar
build.dependsOn outputJar

libraryBuild.dependsOn build

publishing {
	repositories {
		maven {
			url = releasesRepoUrl
		}
	}
}

clean {
	delete releasesRepoUrl
}

model {
	publishing {
		publications {
			java(MavenPublication) {
				artifact jar
				artifact sourcesJar
				artifact javadocJar

				artifactId = "${baseArtifactId}-java"
				groupId artifactGroupId
				version pubVersion
			}
		}
	}
}
